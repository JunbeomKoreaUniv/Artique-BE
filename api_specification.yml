swagger: "2.0"
info:
  title: "정보대 해커톤 팀5 API"
  version: "1.0.0"
  description: "swagger 버전 문제로 RequestBody, Header가 표시가 되지 않습니다.\nParameter를 Request라고 생각하고 명세서 읽어주세요!"

tags:
  - name: "Admin"
    description: "전시회측 로그인 관련 API"
  - name: "Chat"
    description: "채팅(감상자와 AI와의 대화내역) 관련 API"
  - name: "Picture"
    description: "작품 정보 관련 API"
  - name: "Combined Picture"
    description: "사진+글귀 파일 업로드 관련 API"

paths:
  #회원가입 API 명세
  admin/signup:
    post:
      tags:
        - "Admin"
      summary: "회원가입"
      consumes:
        - application/json
      parameters:
        - in: body
          name: User
          description: "User signup data"
          required: true
          schema:
            type: object
            properties:
              nickname:
                type: string
                description: "닉네임"
                example: "준범"
              email:
                type: string
                example: "ku2soon@korea.ac.kr"
              password:
                type: string
                example: "1234"
            required:
              - username
              - email
              - password
      responses:
        "200":
          description: "sign up success"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "[유저명] Successfully signed up!"
        "400":
          description: "signup fail"
          schema:
            type: object
            properties:
              error:
                type: string
          examples:
            email_error:
              summary: "이메일 중복"
              value:
                error: "Email already exists"
            nickname_error:
              summary: "닉네임 중복"
              value:
                error: "Nickname already exists"
            both_error:
              summary: "이메일, 닉네임 모두 중복"
              value:
                error: "Email and nickname already exist"

  #로그인 API 명세
  admin/login:
    post:
      tags:
        - "Admin"
      summary: "User Login"
      description: "로그인 성공시 엑세스,리프레시 토큰 반환"
      consumes:
        - application/json
      parameters:
        - in: body
          name: credentials
          description: "User login data"
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                description: "The user's email address"
                example: "ku2soon@korea.ac.kr"
              password:
                type: string
                description: "The user's password"
                example: "1234"
            required:
              - email
              - password
      responses:
        "200":
          description: "Login successful"
          schema:
            type: object
            properties:
              access_token:
                type: string
                description: "JWT authentication token"
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              refresh_token:
                type: string
                description: "JWT 리프레시 토큰"
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "401":
          description: "Invalid credentials"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid credentials"

  #엑세스 토큰 재발급 with 리프레시토큰 API 명세
  admin/refresh:
    post:
      tags:
        - "Admin"
      summary: "엑세스토큰 재발급 with 리프레시토큰"
      description: "헤더에 리프레시토큰만 담아서 보내면 유효할 시 엑세스토큰 재발급"
      consumes:
        - application/json
      parameters:
        - in: header
          name: Authorization
          description: "리프레시 토큰 (예: 'Bearer eyJhbGciOiJIU...')"
          required: true
          type: string
      responses:
        "200":
          description: "엑세스토큰 발급 성공"
          schema:
            type: object
            properties:
              access_token:
                type: string
                description: "JWT authentication token"
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "401":
          description: "엑세스토큰 발급 실패"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid credentials"

  # 채팅 내역 저장 API 명세
  chat/save:
    post:
      tags:
        - "Chat"
      summary: "채팅내역 저장"
      consumes:
        - application/json
      parameters:
        - in: body
          name: chat
          description: |
            채팅 내역\n
            - `picture_id`: 해당 채팅내역이 속하는 Picture테이블의 id
            - `sender`: GPT일 경우 "AI", 사용자일 경우 해당 `nickname`
            - `receiver`: GPT일 경우 "AI", 사용자일 경우 해당 `nickname`
          required: true
          schema:
            type: object
            properties:
              picture_id:
                type: string
                example: "1"
              message:
                type: string
                example: "이 작품의 시대적 배경에 대해 설명해줘"
              sender:
                type: string
                example: "user_nickname"  # 사용자 nickname
              receiver:
                type: string
                example: "AI"  # GPT일 경우 AI
            required:
              - picture_id
              - message
              - sender
              - receiver
      responses:
        "201":
          description: "채팅 내역 저장 성공"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Chat saved successfully"
        "400":
          description: "채팅 내역 저장 실패\nRequest에서 빠진 attribute명을 반환"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "picture_id"

# 채팅 요약 API 명세
chat/summary:
  post:
    tags:
      - "Chat"
    summary: "채팅 데이터를 추출하여 요약한 뒤, 5개의 감성적인 문장과 명언을 반환"
    consumes:
      - application/json
    parameters:
      - in: body
        name: chat
        description: "채팅 데이터를 기반으로 감성적인 문장과 명언 5개를 생성합니다. receiver_id는 요약할 채팅을 받은 사람의 ID입니다."
        required: true
        schema:
          type: object
          properties:
            receiver:
              type: integer
              example: 2
          required:
            - receiver
    responses:
      "201":
        description: "채팅 요약 성공"
        schema:
          type: object
          properties:
            sentences:
              type: array
              items:
                type: string
                example: "이 삶은 매일이 선물입니다."
              description: "AI로 생성된 감성적인 문장 5개"
      "400":
        description: "채팅 요약 실패\nRequest에서 빠진 attribute명 또는 기타 오류"
        schema:
          type: object
          properties:
            error:
              type: string
              example: "receiver_id"
      "500":
        description: "서버 오류"
        schema:
          type: object
          properties:
            error:
              type: string
              example: "Internal server error"


  # 작품 API 명세
  # 작품 정보 저장
  picture/create:
    post:
      tags:
        - "Picture"
      summary: "작품 정보 저장"
      consumes:
        - form-data
      description: "JWT 토큰을 통해 인증된 사용자만 데이터를 저장할 수 있음"
      security:
        - bearerAuth: [ ]
      parameters:
        - in: body
          name: picture
          description: "작품 정보를 포함하는 객체\n작품의 name, artist, gallery, start_date, end_date, custom_explanation, custom_question, sound 등을 포함\n이 때 헤더에 엑세스토큰 넣어야함!!\n또한 custom_explanation은 not null임!!\n그리고 사진이 포함돼있으므로 json형태가 아니라 form-data형식으로 request해야함"
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: "작품명"
                example: "Starry Night"
              artist:
                type: string
                description: "작가명"
                example: "Vincent van Gogh"
              gallery:
                type: string
                description: "전시회명"
                example: "Museum of Modern Art"
              start_date:
                type: string
                format: date-time
                description: "전시 시작 날짜"
                example: "2024-11-10 10:00"
              end_date:
                type: string
                format: date-time
                description: "전시 종료 날짜"
                example: "2024-12-10 18:00"
              custom_prompt:
                type: string
                description: "커스텀 프롬프트"
                example: "This is a prompt of the artwork."
              custom_explanation:
                type: string
                description: "커스텀 설명"
                example: "This is a detailed explanation of the artwork."
              custom_question:
                type: string
                description: "커스텀 질문"
                example: "What emotions does this artwork evoke?"
              picture_photo:
                type: string
                description: "사진"
                example: "파일 형태로 백에 전달 by form-data"
            required:
              - name
              - artist
              - gallery
              - start_date
              - end_date
              - custom_explanation
              - custom_question
              - picture_photo
      responses:
        "201":
          description: "Picture created successfully"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Picture created successfully"
              picture_id:
                type: integer
                example: 1
        "401":
          description: "Unauthorized"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid or missing token"
        "400":
          description: "Validation error"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Validation error details"


  # 작품 수정
  picture/modify/{picture_id}:
    post:
      tags:
        - "Picture"
      summary: "기존 작품 정보 수정"
      consumes:
        - form-data
      description: "JWT 토큰을 통해 인증된 사용자만 기존의 Picture 데이터를 수정할 수 있음"
      security:
        - bearerAuth: [ ]
      parameters:
        - in: body
          name: picture
          description: "작품 정보를 포함하는 객체\n작품의 name, artist, gallery, start_date, end_date, custom_explanation, custom_question, sound 등을 포함\n이 때 헤더에 엑세스토큰 넣어야함!!\n그리고 사진이 포함돼있으므로 json형태가 아니라 form-data형식으로 request해야함"
          required: true
          schema:
            type: integer
          description: "수정할 Picture의 ID"
        - in: body
          name: picture
          description: "수정할 작품의 정보\n각 필드는 수정할 작품의 새로운 값을 전달"
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: "작품명"
                example: "Starry Night"
              artist:
                type: string
                description: "작가명"
                example: "Vincent van Gogh"
              gallery:
                type: string
                description: "전시회명"
                example: "Museum of Modern Art"
              start_date:
                type: string
                format: date-time
                description: "전시 시작 날짜"
                example: "2024-11-10 10:00"
              end_date:
                type: string
                format: date-time
                description: "전시 종료 날짜"
                example: "2024-12-10 18:00"
              custom_prompt:
                type: string
                description: "커스텀 프롬프트"
                example: "This is a prompt of the artwork."
              custom_explanation:
                type: string
                description: "커스텀 설명"
                example: "This is a detailed explanation of the artwork."
              custom_question:
                type: string
                description: "커스텀 질문"
                example: "What emotions does this artwork evoke?"
              picture_photo:
                type: string
                description: "사진"
                example: "파일 형태로 백에 전달 by form-data"
            required:
              - name
              - artist
              - gallery
              - start_date
              - end_date
              - custom_explanation
              - custom_question
              - picture_photo
      responses:
        "200":
          description: "Picture updated successfully"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Picture updated successfully"
              picture_id:
                type: integer
                example: 1
        "401":
          description: "Unauthorized"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid or missing token"
        "403":
          description: "Permission denied"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Permission denied"
        "400":
          description: "Validation error"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Validation error details"
        "404":
          description: "Picture not found"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Picture not found"


  #사진+글귀 파일
  combined_picture/upload_combined_picture:
    post:
      tags:
        - "Combined Picture"
      summary: "사진+글귀가 결합된 파일 업로드"
      description: "사용자가 업로드한 사진+글귀 파일을 S3에 저장하고, 저장된 URL을 반환합니다."
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: combined_picture
          description: "업로드할 사진+글귀가 결합된 파일"
          required: true
          type: file
      responses:
        "200":
          description: "파일 업로드 성공"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Combined picture uploaded successfully"
              photo_url:
                type: string
                example: "https://your-s3-bucket.s3.amazonaws.com/combined_pictures/your_uploaded_file.jpg"
        "400":
          description: "파일 미제공"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "No file provided"
        "500":
          description: "S3 업로드 실패"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Failed to upload to S3: [에러 메시지]"